MESSAGE REQUESTED & FORMAT IT TO JSON!VALUE
        let msg = socket.read_message().expect("Error reading message");
        let msg = match msg {
        tungstenite::Message::Text(s) => s,
            _ => {
                 panic!("Error getting text");
                }
            };
         let parsed_data: serde_json::Value = serde_json::from_str(&msg).expect("Unable to parse message");
         //println!("{:#?}",parsed_data);
         println!("Channel:\t{:#?}\nEvent:\t{:#?}\nMicrotimestamp:\t {:#?}\nTimestamp:\t{:#?}\n
                  Data[asks]:\t{:#?}\nData[bids]:\t{:#?}\n\n\n",parsed_data["channel"],parsed_data["event"],parsed_data["data"]["microtimestamp"],parsed_data["data"]["timestamp"],parsed_data["data"]["asks"][0],parsed_data["data"]["bids"][0]);

Message has 3 main fields: {
	channel: String,
	event: String,
	data: Data,
}

# Note all fields returned are numbers in string format
# deserialize them
struct Data {
  bids: Vec<(String, String)>,
  asks: Vec<(String, String),
  timestamp: String,
  microtimestamp: String,
}



OUTPUT

Channel:	String(
    "order_book_ethusd",
)
Event:	String(
    "data",
)
Microtimestamp:	 String(
    "1659373868890227",
)
Timestamp:	String(
    "1659373868",
)
Data[asks]:	Array([
    String(
        "1648.61",
    ),
    String(
        "1.60000000",
    ),
])
Data[bids]:	Array([
    String(
        "1647.41",
    ),
    String(
        "3.01418707",
    ),
])
